<Window x:Class="WpfVisualizer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfVisualizer"
        xmlns:avalon="http://icsharpcode.net/sharpdevelop/avalonedit"
        xmlns:core="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d" Loaded="Window_Loaded" 
        Title="MainWindow" Height="1000" Width="1000">

    <Window.Resources>
        <Style x:Key="Error" TargetType="TextBlock">
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Foreground" Value="DarkRed"/>
        </Style>

        <Style x:Key="Hidden" TargetType="FrameworkElement">
            <Setter Property="Visibility" Value="Collapsed"/>
        </Style>


        <!-- TextBlock definitions -->
        <Style x:Key="Adaptive.TextBlock" TargetType="TextBlock" >
        </Style>

        <Style x:Key="Adaptive.TextBlock.Small" TargetType="TextBlock" BasedOn="{StaticResource Adaptive.TextBlock}">
            <Setter Property="FontSize" Value="10"/>
        </Style>

        <Style x:Key="Adaptive.TextBlock.Normal" TargetType="TextBlock" BasedOn="{StaticResource Adaptive.TextBlock}">
            <Setter Property="FontSize" Value="12"/>
        </Style>

        <Style x:Key="Adaptive.TextBlock.Medium" TargetType="TextBlock" BasedOn="{StaticResource Adaptive.TextBlock}">
            <Setter Property="FontSize" Value="14"/>
        </Style>

        <Style x:Key="Adaptive.TextBlock.Large" TargetType="TextBlock" BasedOn="{StaticResource Adaptive.TextBlock}">
            <Setter Property="FontSize" Value="17"/>
        </Style>

        <Style x:Key="Adaptive.TextBlock.ExtraLarge" TargetType="TextBlock" BasedOn="{StaticResource Adaptive.TextBlock}">
            <Setter Property="FontSize" Value="20"/>
        </Style>

        <!-- color definitions -->
        <SolidColorBrush x:Key="Adaptive.DefaultBrush" Color="Black"/>
        <SolidColorBrush x:Key="Adaptive.AccentBrush" Color="Blue"/>
        <SolidColorBrush x:Key="Adaptive.DarkBrush" Color="Black"/>
        <SolidColorBrush x:Key="Adaptive.LightBrush" Color="White"/>
        <SolidColorBrush x:Key="Adaptive.GoodBrush" Color="Green"/>
        <SolidColorBrush x:Key="Adaptive.WarningBrush" Color="Gold"/>
        <SolidColorBrush x:Key="Adaptive.AttentionBrush" Color="DarkRed"/>

        <!-- textWeight definitions -->
        <FontWeight x:Key="Adaptive.BolderFontWeight">Bold</FontWeight>
        <FontWeight x:Key="Adaptive.NormalFontWeight">Normal</FontWeight>
        <FontWeight x:Key="Adaptive.LighterFontWeight">Thin</FontWeight>

        <!-- Text IsSubtle Opacity -->
        <core:Double x:Key="Adaptive.IsSubtleOpacity">.50</core:Double>

        <!-- adaptive card Styling -->
        <Style x:Key="Adaptive.Card" TargetType="Grid">
            <Setter Property="Background" Value="WhiteSmoke"/>
        </Style>

        <Style x:Key="Adaptive.InnerCard" TargetType="Grid">
            <Setter Property="Margin" Value="8"/>
        </Style>

        <!-- Container Styling -->
        <Style x:Key="Adaptive.Container" TargetType="Grid">
        </Style>

        <!-- Column/ColumnSet Styling-->
        <Style x:Key="Adaptive.ColumnSet" TargetType="Grid">
        </Style>

        <Style x:Key="Adaptive.Column" TargetType="Grid">
        </Style>

        <!-- Separator Styling -->
        <Style x:Key="Adaptive.Separator" TargetType="Grid">
            <Setter Property="Margin" Value="0,8,0,8"/>
            <Setter Property="Background" Value="Transparent"/>
        </Style>

        <!-- you can define per element seperator styles like this -->
        <Style x:Key="Adaptive.Separator.TextBlock" TargetType="Grid" BasedOn="{StaticResource Adaptive.Separator}">
        </Style>

        <Style x:Key="Adaptive.Separator.Strong" TargetType="Grid">
            <Setter Property="Margin" Value="0,10,0,10"/>
            <Setter Property="Background" Value="LightGray"/>
            <Setter Property="Height" Value="1"/>
        </Style>

        <!-- VerticalSeparator Styling -->
        <Style x:Key="Adaptive.VerticalSeparator"  TargetType="{x:Type Grid}" >
            <Setter Property="Width" Value="1"/>
            <Setter Property="Margin" Value="8,0,8,0"/>
            <Setter Property="Background" Value="Transparent"/>
        </Style>

        <Style x:Key="Adaptive.VerticalSeparator.Strong" TargetType="{x:Type Grid}" >
            <Setter Property="Width" Value="1"/>
            <Setter Property="Margin" Value="10,0,10,0"/>
            <Setter Property="Background" Value="LightGray"/>
        </Style>

        <!-- Fact/FactSet Styling -->
        <Style x:Key="Adaptive.FactSet" TargetType="Grid">
            <Setter Property="Margin" Value="0,2,0,2"/>
        </Style>

        <Style x:Key="Adaptive.Fact.Name" TargetType="TextBlock">
            <Setter Property="Margin" Value="2, 2, 10, 2"/>
            <Setter Property="FontWeight" Value="Bold"/>
        </Style>

        <Style x:Key="Adaptive.Fact.Value" TargetType="TextBlock">
            <Setter Property="Margin" Value="2"/>
        </Style>

        <!-- Image/ImageGallery Styling -->
        <Style x:Key="Adaptive.Image" TargetType="Image">
        </Style>

        <Style x:Key="Adaptive.Image.Auto" TargetType="Image" BasedOn="{StaticResource Adaptive.Image}">
            <Setter Property="Stretch" Value="Uniform"/>
        </Style>

        <Style x:Key="Adaptive.Image.Stretch" TargetType="Image" BasedOn="{StaticResource Adaptive.Image}">
            <Setter Property="Stretch" Value="UniformToFill"/>
        </Style>

        <Style x:Key="Adaptive.Image.Small" TargetType="Image" BasedOn="{StaticResource Adaptive.Image}">
            <Setter Property="Width" Value="60"/>
            <Setter Property="Height" Value="60"/>
        </Style>

        <Style x:Key="Adaptive.Image.Medium" TargetType="Image" BasedOn="{StaticResource Adaptive.Image}">
            <Setter Property="Width" Value="120"/>
            <Setter Property="Height" Value="120"/>
        </Style>

        <Style x:Key="Adaptive.Image.Large" TargetType="Image" BasedOn="{StaticResource Adaptive.Image}">
            <Setter Property="Width" Value="180"/>
            <Setter Property="Height" Value="180"/>
        </Style>

        <Style x:Key="Adaptive.ImageGallery" TargetType="ListBox">
        </Style>

        <!-- Circular Person mask -->
        <RadialGradientBrush x:Key="PersonMask" GradientOrigin="0.5,0.5" Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
            <GradientStop Color="#ffffffff" Offset="0.9" />
            <GradientStop Color="#00ffffff" Offset="1.0" />
        </RadialGradientBrush>

        <Style x:Key="Adaptive.Image.Person" TargetType="Image" BasedOn="{StaticResource Adaptive.Image}">
            <Setter Property="OpacityMask" Value="{StaticResource PersonMask}"/>
        </Style>

        <Style x:Key="Adaptive.Image.Auto.Person" TargetType="Image" BasedOn="{StaticResource Adaptive.Image.Auto}">
            <Setter Property="OpacityMask" Value="{StaticResource PersonMask}"/>
        </Style>

        <Style x:Key="Adaptive.Image.Stretch.Person" TargetType="Image" BasedOn="{StaticResource Adaptive.Image.Stretch}">
            <Setter Property="OpacityMask" Value="{StaticResource PersonMask}"/>
        </Style>

        <Style x:Key="Adaptive.Image.Small.Person" TargetType="Image" BasedOn="{StaticResource Adaptive.Image.Small}">
            <Setter Property="OpacityMask" Value="{StaticResource PersonMask}"/>
        </Style>

        <Style x:Key="Adaptive.Image.Medium.Person" TargetType="Image" BasedOn="{StaticResource Adaptive.Image.Medium}">
            <Setter Property="OpacityMask" Value="{StaticResource PersonMask}"/>
        </Style>

        <Style x:Key="Adaptive.Image.Large.Person" TargetType="Image" BasedOn="{StaticResource Adaptive.Image.Large}">
            <Setter Property="OpacityMask" Value="{StaticResource PersonMask}"/>
        </Style>


        <!-- Input definitions -->
        <Style x:Key="Adaptive.Input" TargetType="FrameworkElement" >
        </Style>

        <Style x:Key="Adaptive.Input.ChoiceSet" TargetType="FrameworkElement" >
        </Style>

        <Style x:Key="Adaptive.Input.Text" TargetType="FrameworkElement" BasedOn="{StaticResource Adaptive.Input}">
        </Style>

        <Style x:Key="Adaptive.Input.Date" TargetType="FrameworkElement"  BasedOn="{StaticResource Adaptive.Input}">
        </Style>

        <Style TargetType="DatePickerTextBox">
            <Setter Property="Text" Value="{Binding Placeholder}"/>
        </Style>

        <Style x:Key="Adaptive.Input.Time" TargetType="FrameworkElement"  BasedOn="{StaticResource Adaptive.Input}">
        </Style>

        <Style x:Key="Adaptive.Input.Number" TargetType="FrameworkElement"  BasedOn="{StaticResource Adaptive.Input}">
        </Style>

        <Style x:Key="Adaptive.Input.Toggle" TargetType="FrameworkElement"  BasedOn="{StaticResource Adaptive.Input}">
        </Style>

        <Style x:Key="Adaptive.Input.Text.Tel" TargetType="FrameworkElement"  BasedOn="{StaticResource Adaptive.Input.Text}">
        </Style>

        <Style x:Key="Adaptive.Input.Text.Password" TargetType="FrameworkElement"  BasedOn="{StaticResource Adaptive.Input.Text}">
        </Style>

        <Style x:Key="Adaptive.Input.Text.Email" TargetType="FrameworkElement"  BasedOn="{StaticResource Adaptive.Input.Text}">
        </Style>

        <Style x:Key="Adaptive.Input.ChoiceInput.ComboBox" TargetType="FrameworkElement"  BasedOn="{StaticResource Adaptive.Input.ChoiceSet}">
        </Style>

        <Style x:Key="Adaptive.Input.ChoiceInput.ComboBoxItem" TargetType="ComboBoxItem"  >
        </Style>

        <Style x:Key="Adaptive.Input.ChoiceInput.Radio" TargetType="RadioButton"  >
        </Style>

        <Style x:Key="Adaptive.Input.ChoiceInput.CheckBox" TargetType="CheckBox"  >
        </Style>

        <!-- Action Styles -->
        <Style x:Key="Adaptive.Actions" TargetType="FrameworkElement"  >
            <Setter Property="Margin" Value="4"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
        </Style>

        <Style x:Key="Adaptive.Action" TargetType="Button"  >
            <Setter Property="Margin" Value="4"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">

                        <!-- Content handles within a border -->
                        <Border x:Name="bdr" CornerRadius="6" Margin="3" BorderThickness="1" BorderBrush="Black" Background="#FF5098FF">
                            <!-- ContentPresenter properties. Set the content source as the content from each control define below -->
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Content" TextBlock.FontSize="20"   />
                        </Border>

                        <!-- Required triggers define here -->
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="bdr" Property="Opacity" Value=".6"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="Adaptive.Action.Title" TargetType="TextBlock" >
            <Setter Property="Margin" Value="4"/>
            <Setter Property="Foreground" Value="White"/>
        </Style>

        <Style x:Key="Adaptive.Action.OpenUrl" TargetType="Button"  BasedOn="{StaticResource Adaptive.Action}">
        </Style>

        <Style x:Key="Adaptive.Action.ShowCard" TargetType="Button"  BasedOn="{StaticResource Adaptive.Action}">
        </Style>

        <Style x:Key="Adaptive.Action.Submit" TargetType="Button"  BasedOn="{StaticResource Adaptive.Action}">
        </Style>

        <Style x:Key="Adaptive.Action.Http" TargetType="Button"  BasedOn="{StaticResource Adaptive.Action}">
        </Style>

        <Style x:Key="Adaptive.Action.Tap" TargetType="Button">
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Cursor" Value="Hand" />
                </Trigger>
                <EventTrigger RoutedEvent="UIElement.MouseEnter">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" To="0.7" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <EventTrigger RoutedEvent="UIElement.MouseLeave">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" To="1.0" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>

            </Style.Triggers>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="Transparent">
                            <ContentPresenter/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Grid Margin="8">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <StackPanel Orientation="Horizontal">
            <Button Name="loadButton" Click="loadButton_Click" Content="Load" Margin="4"/>
            <Button Name="viewImage" Click="viewImage_Click" Content="View as Image" Margin="4"/>
            <Button Name="speak" Click="speak_Click" Content="Speak" Margin="4"/>
            <Button Name="toJson" Content="To JSON" Margin="4" Click="toJson_Click"/>
            <Button Name="toXml" Content="To XML" Margin="4" Click="toXml_Click"/>
        </StackPanel>

        <!--<TextBox Grid.Row="1" AcceptsReturn="True" AcceptsTab="True" Name="textBox" TextChanged="textBox_TextChanged"></TextBox>-->
        <avalon:TextEditor Grid.Row="1" Name="textBox" SyntaxHighlighting="Json" FontFamily="Consolas" FontSize="10pt"
                            ShowLineNumbers="true" TextChanged="textBox_TextChanged"/>

        <Border Margin="68,67,60,67"  CornerRadius="20" Grid.Column="1" Grid.Row="1" VerticalAlignment="Top" >
            <Border.Effect>
                <DropShadowEffect />
            </Border.Effect >
            <Grid Name="cardGrid" Background="WhiteSmoke" MaxWidth="700" />
        </Border>

        <Grid Grid.Row="2" Name="cardError" />

    </Grid>
</Window>
