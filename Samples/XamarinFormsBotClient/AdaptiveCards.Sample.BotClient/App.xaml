<!-- Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT License. -->
<?xml version="1.0" encoding="utf-8" ?>
<Application xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:system="clr-namespace:System;assembly=System.Runtime"
             x:Class="AdaptiveCards.XamarinForms.BotClient.App">
    <Application.Resources>

        <ResourceDictionary>
            <!-- Application resource dictionary -->
            <Style x:Key="Error" TargetType="Label">
                <Setter Property="FontSize" Value="16"/>
                <Setter Property="TextColor" Value="Maroon"/>
            </Style>

            <Style x:Key="Hidden" TargetType="View">
                <Setter Property="IsVisible" Value="False"/>
            </Style>

            <!-- Label definitions --><!--
            <Style x:Key="Adaptive.TextBlock" TargetType="Label" >
            </Style>

            <Style x:Key="Adaptive.TextBlock.Small" TargetType="Label" BasedOn="{StaticResource Adaptive.TextBlock}">
                <Setter Property="FontSize" Value="10"/>
            </Style>

            <Style x:Key="Adaptive.TextBlock.Normal" TargetType="Label" BasedOn="{StaticResource Adaptive.TextBlock}">
                <Setter Property="FontSize" Value="12"/>
            </Style>

            <Style x:Key="Adaptive.TextBlock.Medium" TargetType="Label" BasedOn="{StaticResource Adaptive.TextBlock}">
                <Setter Property="FontSize" Value="14"/>
            </Style>

            <Style x:Key="Adaptive.TextBlock.Large" TargetType="Label" BasedOn="{StaticResource Adaptive.TextBlock}">
                <Setter Property="FontSize" Value="17"/>
            </Style>

            <Style x:Key="Adaptive.TextBlock.ExtraLarge" TargetType="Label" BasedOn="{StaticResource Adaptive.TextBlock}">
                <Setter Property="FontSize" Value="20"/>
            </Style>

            --><!-- color definitions --><!--
            <Color x:Key="Adaptive.Default">Black</Color>
            <Color x:Key="Adaptive.Accent">Blue</Color>
            <Color x:Key="Adaptive.Dark">Black</Color>
            <Color x:Key="Adaptive.Light">White</Color>
            <Color x:Key="Adaptive.Good">Green</Color>
            <Color x:Key="Adaptive.Warning">Yellow</Color>
            <Color x:Key="Adaptive.Attention">Maroon</Color>


            --><!-- textWeight definitions -->
            <!--<FontWeight x:Key="Adaptive.BolderFontWeight">Bold</FontWeight>
            <FontWeight x:Key="Adaptive.NormalFontWeight">Normal</FontWeight>
            <FontWeight x:Key="Adaptive.LighterFontWeight">Thin</FontWeight>-->

            <!-- Text IsSubtle Opacity --><!--
            <system:Double x:Key="Adaptive.IsSubtleOpacity">.50</system:Double>

            --><!-- adaptive card Styling --><!--
            <Style x:Key="Adaptive.Card" TargetType="Grid">
                <Setter Property="BackgroundColor" Value="LightGray"/>
            </Style>

            <Style x:Key="Adaptive.InnerCard" TargetType="Grid">
                <Setter Property="Margin" Value="8"/>
            </Style>

            --><!-- Container Styling --><!--
            <Style x:Key="Adaptive.Container" TargetType="Grid">
            </Style>

            --><!-- Column/ColumnSet Styling--><!--
            <Style x:Key="Adaptive.ColumnSet" TargetType="Grid">
            </Style>

            <Style x:Key="Adaptive.Column" TargetType="Grid">
            </Style>

            --><!-- Separator Styling --><!--
            <Style x:Key="Adaptive.Separator" TargetType="Grid">
                <Setter Property="Margin" Value="0,2,0,2"/>
                --><!--<Setter Property="TextColor" Value="Transparent" />--><!--
                <Setter Property="BackgroundColor" Value="Transparent" />
                --><!--<Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type Separator}">
            <Border BorderBrush="Transparent" BorderThickness="0" HeightRequest="1" SnapsToDevicePixels="true" />
          </ControlTemplate>
        </Setter.Value>
      </Setter>--><!--
            </Style>
            <Style x:Key="Adaptive.Separator.Strong" TargetType="Grid">
                <Setter Property="Margin" Value="0,3,0,3"/>
            </Style>

            --><!-- you can define per View seperator styles like this -->
            <!--<Style x:Key="Adaptive.Separator.Label" TargetType="Separator" BasedOn="{StaticResource Adaptive.Separator}">
    </Style>

   -->

            <!-- VerticalSeparator Styling --><!--
            <Style x:Key="Adaptive.VerticalSeparator"  TargetType="Grid" >
                <Setter Property="WidthRequest" Value="1"/>
                <Setter Property="Margin" Value="8,0,8,0"/>
                <Setter Property="BackgroundColor" Value="Transparent"/>
            </Style>

            <Style x:Key="Adaptive.VerticalSeparator.Strong" TargetType="Grid" >
                <Setter Property="WidthRequest" Value="1"/>
                <Setter Property="Margin" Value="10,0,10,0"/>
                <Setter Property="BackgroundColor" Value="Gray"/>
            </Style>

            --><!-- Fact/FactSet Styling --><!--
            <Style x:Key="Adaptive.FactSet" TargetType="Grid">
                <Setter Property="Margin" Value="0,2,0,2"/>
            </Style>

            <Style x:Key="Adaptive.Fact.Name" TargetType="Label">
                <Setter Property="Margin" Value="2, 2, 10, 2"/>
                <Setter Property="FontAttributes" Value="Bold"/>
            </Style>

            <Style x:Key="Adaptive.Fact.Value" TargetType="Label">
                <Setter Property="Margin" Value="2"/>
            </Style>

            --><!-- Image/ImageGallery Styling --><!--
            <Style x:Key="Adaptive.Image" TargetType="Image">
            </Style>

            <Style x:Key="Adaptive.Image.Auto" TargetType="Image" BasedOn="{StaticResource Adaptive.Image}">
                <Setter Property="HorizontalOptions" Value="Fill"/>
            </Style>

            <Style x:Key="Adaptive.Image.Stretch" TargetType="Image" BasedOn="{StaticResource Adaptive.Image}">
                <Setter Property="HorizontalOptions" Value="FillAndExpand"/>
            </Style>

            <Style x:Key="Adaptive.Image.Small" TargetType="Image" BasedOn="{StaticResource Adaptive.Image}">
                <Setter Property="WidthRequest" Value="60"/>
                <Setter Property="HeightRequest" Value="60"/>
            </Style>

            <Style x:Key="Adaptive.Image.Medium" TargetType="Image" BasedOn="{StaticResource Adaptive.Image}">
                <Setter Property="WidthRequest" Value="120"/>
                <Setter Property="HeightRequest" Value="120"/>
            </Style>

            <Style x:Key="Adaptive.Image.Large" TargetType="Image" BasedOn="{StaticResource Adaptive.Image}">
                <Setter Property="WidthRequest" Value="180"/>
                <Setter Property="HeightRequest" Value="180"/>
            </Style>

            --><!--<Style x:Key="Adaptive.ImageGallery" TargetType="ListBox">
    </Style>-->

            <!-- Circular Person mask -->
            <!--<RadialGradientBrush x:Key="PersonMask" GradientOrigin="0.5,0.5" Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
      <GradientStop Color="#ffffffff" Offset="0.9" />
      <GradientStop Color="#00ffffff" Offset="1.0" />
    </RadialGradientBrush>-->

            <!--<Style x:Key="Adaptive.Image.Person" TargetType="Image" BasedOn="{StaticResource Adaptive.Image}">
      <Setter Property="OpacityMask" Value="{StaticResource PersonMask}"/>
    </Style>

    <Style x:Key="Adaptive.Image.Auto.Person" TargetType="Image" BasedOn="{StaticResource Adaptive.Image.Auto}">
      <Setter Property="OpacityMask" Value="{StaticResource PersonMask}"/>
    </Style>

    <Style x:Key="Adaptive.Image.Stretch.Person" TargetType="Image" BasedOn="{StaticResource Adaptive.Image.Stretch}">
      <Setter Property="OpacityMask" Value="{StaticResource PersonMask}"/>
    </Style>

    <Style x:Key="Adaptive.Image.Small.Person" TargetType="Image" BasedOn="{StaticResource Adaptive.Image.Small}">
      <Setter Property="OpacityMask" Value="{StaticResource PersonMask}"/>
    </Style>

    <Style x:Key="Adaptive.Image.Medium.Person" TargetType="Image" BasedOn="{StaticResource Adaptive.Image.Medium}">
      <Setter Property="OpacityMask" Value="{StaticResource PersonMask}"/>
    </Style>

    <Style x:Key="Adaptive.Image.Large.Person" TargetType="Image" BasedOn="{StaticResource Adaptive.Image.Large}">
      <Setter Property="OpacityMask" Value="{StaticResource PersonMask}"/>
    </Style>-->


            <!-- Input definitions --><!--
            <Style x:Key="Adaptive.Input" TargetType="View" >
            </Style>

            <Style x:Key="Adaptive.Input.ChoiceSet" TargetType="View" >
            </Style>

            <Style x:Key="Adaptive.Input.Text" TargetType="View" BasedOn="{StaticResource Adaptive.Input}">
            </Style>

            <Style x:Key="Adaptive.Input.Date" TargetType="View"  BasedOn="{StaticResource Adaptive.Input}">
            </Style>

            --><!--<Style TargetType="DatePickerTextBox">
      <Setter Property="Text" Value="{Binding Placeholder}"/>
    </Style>--><!--

            <Style x:Key="Adaptive.Input.Time" TargetType="View"  BasedOn="{StaticResource Adaptive.Input}">
            </Style>

            <Style x:Key="Adaptive.Input.Number" TargetType="View"  BasedOn="{StaticResource Adaptive.Input}">
            </Style>

            <Style x:Key="Adaptive.Input.Toggle" TargetType="View"  BasedOn="{StaticResource Adaptive.Input}">
            </Style>

            <Style x:Key="Adaptive.Input.Text.Tel" TargetType="View"  BasedOn="{StaticResource Adaptive.Input.Text}">
            </Style>

            <Style x:Key="Adaptive.Input.Text.Password" TargetType="View"  BasedOn="{StaticResource Adaptive.Input.Text}">
            </Style>

            <Style x:Key="Adaptive.Input.Text.Email" TargetType="View"  BasedOn="{StaticResource Adaptive.Input.Text}">
            </Style>

            <Style x:Key="Adaptive.Input.ChoiceInput.ComboBox" TargetType="View"  BasedOn="{StaticResource Adaptive.Input.ChoiceSet}">
            </Style>

            --><!--<Style x:Key="Adaptive.Input.ChoiceInput.ComboBoxItem" TargetType="ComboBoxItem"  >
    </Style>

    <Style x:Key="Adaptive.Input.ChoiceInput.Radio" TargetType="RadioButton"  >
    </Style>

    <Style x:Key="Adaptive.Input.ChoiceInput.CheckBox" TargetType="CheckBox"  >
    </Style>-->

            <!-- Action Styles --><!--
            <Style x:Key="Adaptive.Actions" TargetType="View">
                <Setter Property="Margin" Value="4"/>
                <Setter Property="HorizontalOptions" Value="End"/>
            </Style>

            --><!--<Style x:Key="Adaptive.Action" TargetType="Button">
      <Setter Property="Margin" Value="4"/>
      <Setter Property="HorizontalAlignment" Value="Stretch"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type Button}">

            
             Content handles within a border 
            
            <Border x:Name="bdr" CornerRadius="6" Margin="3" BorderThickness="1" BorderBrush="Black" Background="#FF5098FF">
              
             ContentPresenter properties. Set the content source as the content from each control define below 
            
              <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Content" Label.FontSize="20"   />
            </Border>

            
             Required triggers define here 
            
            <ControlTemplate.Triggers>
              <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="bdr" Property="Opacity" Value=".6"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>--><!--

            <Style x:Key="Adaptive.Action.Title" TargetType="Label" >
                <Setter Property="Margin" Value="4"/>
                <Setter Property="TextColor" Value="White"/>
            </Style>-->

            <!--<Style x:Key="Adaptive.Action.OpenUrl" TargetType="Button"  BasedOn="{StaticResource Adaptive.Action}">
    </Style>

    <Style x:Key="Adaptive.Action.ShowCard" TargetType="Button"  BasedOn="{StaticResource Adaptive.Action}">
    </Style>

    <Style x:Key="Adaptive.Action.Submit" TargetType="Button"  BasedOn="{StaticResource Adaptive.Action}">
    </Style>

    <Style x:Key="Adaptive.Action.Http" TargetType="Button"  BasedOn="{StaticResource Adaptive.Action}">
    </Style>-->

            <!--<Style x:Key="Adaptive.Action.Tap" TargetType="Button">
      <Style.Triggers>
        <Trigger Property="IsMouseOver" Value="True">
          <Setter Property="Cursor" Value="Hand" />
        </Trigger>
        <EventTrigger RoutedEvent="UIElement.MouseEnter">
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" To="0.7" />
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger>
        <EventTrigger RoutedEvent="UIElement.MouseLeave">
          <BeginStoryboard>
            <Storyboard>
              <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" To="1.0" />
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger>

      </Style.Triggers>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="Button">
            <Border Background="Transparent">
              <ContentPresenter/>
            </Border>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>-->
        </ResourceDictionary>
    </Application.Resources>
</Application>
